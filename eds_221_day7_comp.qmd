---
title: "joins_strings_dates"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
library(lubridate)
library(stringr)

```

## Joins

data pasta, addins, paste as tribble

```{r}
animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
              "lagoon",   "bobcat",    "adult",
               "bluff",   "coyote", "juvenile",
               "creek",      "fox",    "adult",
                "oaks", "squirrel", "juvenile",
               "bluff",   "bobcat",    "adult"
             )
sites <- tibble::tribble(
           ~location,      ~full_site_name, ~jurisdiction,
             "beach",       "Goleta Beach",     "SB City",
            "lagoon",        "UCSB Lagoon",        "UCSB",
             "bluff",       "Ellwood Mesa",     "SB City",
              "oaks", "Fremont Campground",        "USFS"
           )

```

### full join

```{r}
full_join_example <- full_join(animals,sites, by = "location")

#if the key has different name by location by = c("a" = "b")
weird <- full_join(animals, sites, by = c("location" = "jurisdiction"))

```

### Left Join

```{r}
left_example <- left_join(animals, sites, by = "location")

```

### inner join

```{r}
inner_example <- inner_join(animals, sites, by = "location")
sites_2 <- inner_example |> rename(loc = location)

```

```{r}
non_matching <- full_join(animals, sites_2, by = c("location" = "loc"))
```

# Filtering Joins

### semi join

```{r}
semi_join_example <- semi_join(animals, sites)
```

### anti join

```{r}
anti_join <- anti_join(animals, sites, by = "location")
```

you can set up a database connection w/ db connect in sql or r

```{r}
sub <- penguins |> 
  filter(island %in% c("Biscoe", "Dream")) |> 
  select(-year,-sex) |> 
  mutate(body_mass_kg = body_mass_g /1000) |> 
  rename(location = island)

```

# 

# Dates and times with lubridate

```{r}
my_date <- "03 - 15- 1998"

lubridate::mdy(my_date) #converts to iso 8601

my_date2 <- "11/7/2003"
dmy(my_date2)
 

mydate3 <- "08-Jun-1974"
dmy(mydate3)

mydat4 <- "19610518"
ymd(mydat4)

mydate5 <- "august, 1st, 2022"
mdy(mydate5)

class(mdy(mydate5))
```

Break it

```{r}
mdy("1942-08-30")
#doesn't make sense for imput 

dmy("09/22/84")


```

add some times

```{r}
time <- "2020-08-12 11:18"
time <- ymd_hm(time)
class(time)
```

```{r}
with_tz(time, "America/Los_Angeles") #convert between time zone

with_tz(time, "Australia/Brisbane")

# pull pieces
my_time <- ymd_hms(time)

year(my_time)
day(my_time)
month(my_time)

hour(my_time)
minute(my_time)
#allows you to say add a new column that only contains the month


```

```{r}
tedd_bday <- ymd("20170615")
wday(tedd_bday, label = TRUE)

bday <- mdy("12/28/1992")
wday(bday, label = TRUE)
week(bday)
```

```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020","purple", 55,
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67)
#how many were seen each month
#parse so you can look at them separately 
urchin_ymd <- urchin_counts |> 
  mutate(date = mdy(date)) |> 
  mutate(year = year(date), month = month(date), day(date))

class(urchin_ymd$date)

```

#find intervals

```{r}
day1 <- ymd("2020-01-06")
day2 <- ymd("2020-05-18")

time_interval <- interval(day1, day2)

time_length(time_interval, "year")

time_length(time_interval, "day")
```

# Stringr for working with strings

str_detect

```{r}
my_string <- "Teddy loves eating salmon and socks"

my_string |> 
  str_detect("pup")

my_string <- c("burrito", "fish taco", "taco salad")

my_string |> str_detect("fish")

#create a subset where we case rows
skywalkers <- starwars |> filter(str_detect(name, pattern = "Skywalker"))

maul <- starwars |> filter(str_detect(name, "Maul"))

blue <- starwars |> filter(str_detect(eye_color, "blue"))


```

### str_replace

```{r}
fire_walkers <- starwars |> 
  mutate(name_2 = str_replace(name, pattern = "Sky", 
                              replacement = "Fire"))


```

#string squish

```{r}
feedback <- c("  I ate    some    nachos", "Wednesday   morning")
str_trim(feedback)

str_squish(feedback)

#capitalization 
#str_to
str_to_lower(feedback)
str_to_upper(feedback)
str_to_title(feedback)
str_to_sentence(feedback)
```

from starwars create a new data frame called starwars_lc that adds new col called name_lower containing character all lowe

```{r}

starwars_lc <- starwars |> mutate(name_lower = str_to_lower(name))

```

## mutate and case when

```{r}

robot <- starwars |> 
  mutate(robot_status = case_when(
    species == "Droid"~ "A Robot",
    species == "Human"~ "It's a human",
    TRUE ~"This is something else"
    ))

```
